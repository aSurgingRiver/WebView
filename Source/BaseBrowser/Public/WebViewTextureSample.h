// Copyright aXiuShen. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "CoreGlobals.h"
#include "Containers/Queue.h"
#include "Math/IntPoint.h"
#include "Math/Range.h"
#include "MediaObjectPool.h"
#include "RHI.h"
#include "RHIUtilities.h"
#include "Templates/SharedPointer.h"

/**
* Texture sample generated by the WebView.
*/
class BASEBROWSER_API FWebViewTextureSample
	: public IMediaPoolable
{
public:

	/** Default constructor. */
	FWebViewTextureSample();

	/** Virtual destructor. */
	virtual ~FWebViewTextureSample();

public:

	/**
	* Get a writable pointer to the sample buffer.
	*
	* @return Sample buffer.
	*/
	void* GetMutableBuffer();

	/**
	* Initialize the sample.
	*
	* @param InDim The sample buffer's width and height (in pixels).
	* @param InDuration The duration for which the sample is valid.
	* @return true on success, false otherwise.
	*/
	bool Initialize(const FIntPoint& InDim);

	/**
	* Initialize the sample with a memory buffer.
	*
	* @param InBuffer The buffer containing the sample data.
	* @param Copy Whether the buffer should be copied (true) or referenced (false).
	* @see InitializeTexture
	*/
	void InitializeBuffer(void* InBuffer, bool Copy);

	/**
	* Initialize the sample for copy externally.
	*
	* @return The size of the buffer
	* @see InitializeTexture
	*/
	int32 InitializeBufferForCopy();

	/**
	* Initialize the sample with a texture resource.
	*
	* @return The texture resource object that will hold the sample data.
	* @note This method must be called on the render thread.
	* @see InitializeBuffer
	*/
#if WEBVIEW_ENGINE_VERSION>=50500
	FRHITexture* InitializeTexture();
#else
	FRHITexture2D* InitializeTexture();
#endif
	/**
	* Set the sample Scale, Rotation, Offset.
	*
	* @param InScaleRotation The sample scale and rotation transform (2x2).
	* @param InOffset The sample offset.
	*/
	void SetScaleRotationOffset(FVector4& InScaleRotation, FVector4& InOffset);

public:

	//~ IMediaTextureSample interface

	virtual const void* GetBuffer();

	virtual FIntPoint GetDim() const;

	virtual uint32 GetStride() const;

#if WITH_ENGINE

	virtual FRHITexture* GetTexture() const;

#endif //WITH_ENGINE

	virtual FLinearColor GetScaleRotation() const;

	virtual FLinearColor GetOffset() const;

private:

	/** The sample's data buffer. */
	void* Buffer;

	/** Current allocation size of Buffer. */
	SIZE_T BufferSize;

	/** Width and height of the texture sample. */
	FIntPoint Dim;

	/** ScaleRotation for the sample. */
	FLinearColor ScaleRotation;

	/** Offset for the sample. */
	FLinearColor Offset;

#if WITH_ENGINE

#if WEBVIEW_ENGINE_VERSION>=50500
	TRefCountPtr<FRHITexture> Texture;
#else
	TRefCountPtr<FRHITexture2D> Texture;
#endif
	/** Texture resource. */

#endif //WITH_ENGINE
};


class BASEBROWSER_API FWebViewTextureSampleQueue
{
public:

	/** Default constructor. */
	FWebViewTextureSampleQueue();

	/** Virtual destructor. */
	virtual ~FWebViewTextureSampleQueue();

public:

	/**
	* Get the number of samples in the queue.
	*
	* @return Number of samples.
	* @see Enqueue, Dequeue, Peek
	*/
	int32 Num() const;

public:

	//~ TMediaSampleSource interface (to be called only from consumer thread)

	virtual bool Dequeue(TSharedPtr<FWebViewTextureSample, ESPMode::ThreadSafe>& OutSample);

	virtual bool Peek(TSharedPtr<FWebViewTextureSample, ESPMode::ThreadSafe>& OutSample);

	virtual bool Pop();

public:

	//~ TMediaSampleSink interface (to be called only from producer thread)

	virtual bool Enqueue(const TSharedPtr<FWebViewTextureSample, ESPMode::ThreadSafe>& Sample);

	virtual void RequestFlush();

protected:

	/** Perform any pending flushes. */
	void DoPendingFlushes();

private:

	/** Number of samples in the queue. */
	int32 NumSamples;

	/** Number of pending flushes. */
	int32 PendingFlushes;

	/** Audio sample queue. */
	TQueue<TSharedPtr<FWebViewTextureSample, ESPMode::ThreadSafe>, EQueueMode::Mpsc> Samples;
};


/** Implements a pool for WebView's texture sample objects. */
class FWebViewTextureSamplePool : public TMediaObjectPool<FWebViewTextureSample> {
public:
	FWebViewTextureSamplePool()=default;
	~FWebViewTextureSamplePool() = default;
};

